/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./flaskr/static/index.js":
/*!********************************!*\
  !*** ./flaskr/static/index.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n\n// function get_data(){\n//     const url = 'http://localhost:5000/data'\n//     fetch(url)\n//     .then(response => response.json())  \n//     .then(json => {\n//         console.log(json);\n//         var user = JSON.parse('{{ user | tojson | safe}}');\n//         document.getElementById('username').innerHTML = user.firstname + \" \" +\n//         user.lastname;    })\n// }\nlet deckGL; // Declare a global variable for the Deck.gl instance\n\n// function get_data() {\n//     const url = '/data'\n//     fetch(url)\n//     .then(response => response.json())  \n//     .then(json => {\n//         console.log(json);\n//         // var user = JSON.parse('{{ user | tojson | safe}}');\n//         document.getElementById('username').innerHTML = json.firstname + \" \" +\n//         json.lastname;    })\n// }\n\nfunction get_db_data() {\n  const url = '/data/airports';\n  fetch(url).then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.json();\n  }).then(data => {\n    const tableHeader = document.querySelector('#airport-table rux-table-header');\n    tableHeader.innerHTML = '';\n    const hr = document.createElement('rux-table-header-row');\n    hr.innerHTML = `\n            <rux-table-header-cell>Name</rux-table-header-cell>\n            <rux-table-header-cell>Latitude</rux-table-header-cell>\n            <rux-table-header-cell>Longitude</rux-table-header-cell>\n        `;\n    tableHeader.appendChild(hr);\n    const tableBody = document.querySelector('#airport-table rux-table-body');\n    tableBody.innerHTML = ''; // Clear any existing rows\n\n    data.forEach(row => {\n      const tr = document.createElement('rux-table-row');\n      tr.innerHTML = `\n                <rux-table-cell>${row.name}</rux-table-cell>\n                <rux-table-cell>${row.coordinates.latitude}</rux-table-cell>\n                <rux-table-cell>${row.coordinates.longitude}</rux-table-cell>\n            `;\n      tableBody.appendChild(tr);\n      console.log(row.name);\n    });\n    update_deck_map(data);\n  }).catch(error => {\n    console.error('Error fetching data:', error);\n  });\n}\nfunction request_airport_data(key, latitude, longitude, radius) {\n  fetch('/data/airport_request', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      key: key,\n      latitude: latitude,\n      longitude: longitude,\n      radius: radius\n    })\n  }).then(response => response.json()).then(data => {\n    // console.log('Fetched data:', data);\n    // Update the map with the fetched data\n    update_deck_map(data);\n    const tableHeader = document.querySelector('#airport-table rux-table-header');\n    tableHeader.innerHTML = '';\n    const hr = document.createElement('rux-table-header-row');\n    hr.innerHTML = `\n            <rux-table-header-cell>Name</rux-table-header-cell>\n            <rux-table-header-cell>Latitude</rux-table-header-cell>\n            <rux-table-header-cell>Longitude</rux-table-header-cell>\n        `;\n    tableHeader.appendChild(hr);\n    const tableBody = document.querySelector('#airport-table rux-table-body');\n    tableBody.innerHTML = ''; // Clear any existing rows\n\n    data.forEach(row => {\n      const tr = document.createElement('rux-table-row');\n      tr.innerHTML = `\n                <rux-table-cell>${row.name}</rux-table-cell>\n                <rux-table-cell>${row.coordinates.latitude}</rux-table-cell>\n                <rux-table-cell>${row.coordinates.longitude}</rux-table-cell>\n            `;\n      tableBody.appendChild(tr);\n      // console.log(row.name)\n    });\n  }).catch(error => {\n    console.error('Error fetching data:', error);\n  });\n}\nfunction initialize_deck_map() {\n  // source: Natural Earth http://www.naturalearthdata.com/ via geojson.xyz\n  const COUNTRIES = 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_50m_admin_0_scale_rank.geojson'; //eslint-disable-line\n  const AIR_PORTS = 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_10m_airports.geojson';\n  deckGL = new deck.DeckGL({\n    container: 'deck-container',\n    // views: [],\n    initialViewState: {\n      latitude: 39,\n      longitude: -104,\n      zoom: 4,\n      bearing: 0,\n      pitch: 30\n    },\n    controller: true,\n    layers: [new deck.GeoJsonLayer({\n      id: 'base-map',\n      data: COUNTRIES,\n      // Styles\n      stroked: true,\n      filled: true,\n      lineWidthMinPixels: 2,\n      opacity: 0.4,\n      getLineColor: [60, 60, 60],\n      getFillColor: [200, 200, 200]\n    }) //, \n    // new deck.GeoJsonLayer({\n    //     id: 'airports',\n    //     data: AIR_PORTS,\n    //     // Styles\n    //     filled: true,\n    //     pointRadiusMinPixels: 2,\n    //     pointRadiusScale: 2000,\n    //     getPointRadius: f => (11 - f.properties.scalerank),\n    //     getFillColor: [200, 0, 80, 180],\n    //     // Interactive props\n    //     pickable: true,\n    //     autoHighlight: true,\n    //     onClick: info => info.object && alert(`${info.object.properties.name} (${info.object.properties.abbrev})`)\n    // }),\n    // new deck.ArcLayer({\n    //     id: 'arcs',\n    //     data: AIR_PORTS,\n    //     dataTransform: d => d.features.filter(f => f.properties.scalerank < 4),\n    //     // Styles\n    //     getSourcePosition: f => [-0.4531566,51.4709959], // London\n    //     getTargetPosition: f => f.geometry.coordinates,\n    //     getSourceColor: [0, 128, 200],\n    //     getTargetColor: [200, 0, 80],\n    //     getWidth: 1\n    // })\n    ]\n  });\n}\nfunction update_deck_map(data) {\n  const scatterplotLayer = new deck.ScatterplotLayer({\n    id: 'scatterplot-layer',\n    data: data,\n    getPosition: d => [d.coordinates.longitude, d.coordinates.latitude],\n    getRadius: 30,\n    // getRadius: d => d.distance * 1000, // Adjust radius based on distance\n    getFillColor: [0, 128, 255, 200],\n    // Blue color with transparency\n    pickable: true,\n    opacity: 0.8,\n    radiusScale: 5,\n    // make the dots visible or darker background\n    radiusMinPixels: 5,\n    // make the dots visible or darker background\n    radiusMaxPixels: 50,\n    // onHover: ({ object, x, y }) => {\n    //     if (object) {\n    //         const tooltip = document.getElementById('tooltip');\n    //         tooltip.style.display = 'block';\n    //         tooltip.style.left = `${x}px`;\n    //         tooltip.style.top = `${y}px`;\n    //         tooltip.innerHTML = `\n    //             <strong>${object.name}</strong><br>\n    //             Coordinates: (${object.latitude}, ${object.longitude})\n    //         `;\n    //     }\n    // },\n    onClick: ({\n      object\n    }) => {\n      if (object) {\n        alert(`You clicked on ${object.name}`);\n      }\n    }\n  });\n\n  // Update the Deck.gl instance with the new layer\n  // const currentLayers = deckGL.props.layers || [];\n  // deckGL.setProps({ layers: [...currentLayers, scatterplotLayer] });\n\n  // const updatedLayers = deckGL.props.layers.map(layer =>\n  //     layer.id === 'scatterplot-layer' ? newUpdatedLayer : layer\n  // );\n  // deckGL.setProps({ layers: updatedLayers });\n\n  // Get the current layers\n  const currentLayers = deckGL.props.layers || [];\n\n  // Filter out the layer to be replaced\n  const updatedLayers = currentLayers.filter(layer => layer.id !== 'scatterplot-layer');\n\n  // Add the new layer\n  updatedLayers.push(scatterplotLayer);\n\n  // Update the Deck.gl layers\n  deckGL.setProps({\n    layers: updatedLayers\n  });\n  console.log('Updated layers:', deckGL.props.layers);\n}\n\n// const updatedLayers = deckGL.props.layers.map(layer =>\n//     layer.id === 'specific-layer-id' ? newUpdatedLayer : layer\n// );\n// deckGL.setProps({ layers: updatedLayers });\n\n// works\n// function get_db_data() {\n//     const url = '/data/airports'\n//     fetch(url)\n//     .then(response => response.json())  \n//     .then(json => {\n//         //console.log(json);\n//         // var user = JSON.parse('{{ user | tojson | safe}}');\n//         document.getElementById('row1name').innerHTML = json.name\n//         document.getElementById('row1lat').innerHTML = json.coordinates.latitude\n//         document.getElementById('row1long').innerHTML = json.coordinates.longitude\n\n//         // json.lastname;    \n//     })\n// }\n\n//# sourceURL=webpack:///./flaskr/static/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./flaskr/static/index.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;