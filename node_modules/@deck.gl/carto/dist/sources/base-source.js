/* eslint-disable camelcase */
import { DEFAULT_API_BASE_URL, DEFAULT_CLIENT, DEFAULT_MAX_LENGTH_URL } from "../api/common.js";
import { buildSourceUrl } from "../api/endpoints.js";
import { requestWithParameters } from "../api/request-with-parameters.js";
export const SOURCE_DEFAULTS = {
    apiBaseUrl: DEFAULT_API_BASE_URL,
    clientId: DEFAULT_CLIENT,
    format: 'tilejson',
    headers: {},
    maxLengthURL: DEFAULT_MAX_LENGTH_URL
};
export async function baseSource(endpoint, options, urlParameters) {
    const { accessToken, connectionName, cache, ...optionalOptions } = options;
    const mergedOptions = { ...SOURCE_DEFAULTS, accessToken, connectionName, endpoint };
    for (const key in optionalOptions) {
        if (optionalOptions[key]) {
            mergedOptions[key] = optionalOptions[key];
        }
    }
    const baseUrl = buildSourceUrl(mergedOptions);
    const { clientId, maxLengthURL, format } = mergedOptions;
    const headers = { Authorization: `Bearer ${options.accessToken}`, ...options.headers };
    const parameters = { client: clientId, ...urlParameters };
    const errorContext = {
        requestType: 'Map instantiation',
        connection: options.connectionName,
        type: endpoint,
        source: JSON.stringify(parameters, undefined, 2)
    };
    const mapInstantiation = await requestWithParameters({
        baseUrl,
        parameters,
        headers,
        errorContext,
        maxLengthURL
    });
    const dataUrl = mapInstantiation[format].url[0];
    if (cache) {
        cache.value = parseInt(new URL(dataUrl).searchParams.get('cache') || '', 10);
    }
    errorContext.requestType = 'Map data';
    if (format === 'tilejson') {
        const json = await requestWithParameters({
            baseUrl: dataUrl,
            headers,
            errorContext,
            maxLengthURL
        });
        if (accessToken) {
            json.accessToken = accessToken;
        }
        return json;
    }
    return await requestWithParameters({
        baseUrl: dataUrl,
        headers,
        errorContext,
        maxLengthURL
    });
}
