import { Texture } from '@luma.gl/core';
export type HeatmapProps = {
    /**
     * Radius of the heatmap blur in pixels, to which the weight of a cell is distributed.
     *
     * @default 20
     */
    radiusPixels?: number;
    /**
     * Controls how weight values are mapped to the colors in `colorTexture`, as an array of two numbers [`minValue`, `maxValue`].
     *
     * @default [0, 1]
     */
    colorDomain?: [number, number];
    /**
     * Value that is multiplied with the total weight at a pixel to obtain the final weight. A value larger than 1 biases the output color towards the higher end of the spectrum, and a value less than 1 biases the output color towards the lower end of the spectrum.
     */
    intensity?: number;
    /**
     * Color LUT for color gradient
     */
    colorTexture: Texture;
    opacity: number;
};
type PassProps = {
    delta: [number, number];
};
export declare const heatmap: {
    readonly name: "heatmap";
    readonly uniformPropTypes: {
        readonly colorDomain: {
            readonly value: readonly [0, 1];
        };
        readonly delta: {
            readonly value: readonly [0, 1];
        };
        readonly intensity: {
            readonly value: 1;
            readonly min: 0.1;
            readonly max: 10;
        };
        readonly opacity: {
            readonly value: 1;
            readonly min: 0;
            readonly max: 1;
        };
        readonly radiusPixels: {
            readonly value: 20;
            readonly min: 0;
            readonly softMax: 100;
        };
    };
    readonly uniformTypes: {
        readonly colorDomain: "vec2<f32>";
        readonly delta: "vec2<f32>";
        readonly intensity: "f32";
        readonly opacity: "f32";
        readonly radiusPixels: "f32";
    };
    readonly getUniforms: (opts: Partial<HeatmapProps & PassProps> | undefined) => {
        colorDomain?: undefined;
        colorTexture?: undefined;
        delta?: undefined;
        intensity?: undefined;
        opacity?: undefined;
        radiusPixels?: undefined;
    } | {
        colorDomain: [number, number];
        colorTexture: Texture<import("@luma.gl/core").TextureProps> | undefined;
        delta: [number, number];
        intensity: number;
        opacity: number;
        radiusPixels: number;
    };
    readonly fs: string;
    readonly passes: [{
        readonly sampler: true;
        readonly uniforms: {
            readonly delta: [1, 0];
        };
    }, {
        readonly sampler: true;
        readonly uniforms: {
            readonly delta: [0, 1];
        };
    }];
};
export {};
//# sourceMappingURL=heatmap.d.ts.map