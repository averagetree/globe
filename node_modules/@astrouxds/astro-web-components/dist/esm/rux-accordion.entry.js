import { r as registerInstance, h, H as Host, g as getElement } from './index-416188d1.js';

const ruxAccordionCss = ":host{display:block}:host([disabled]){cursor:not-allowed;opacity:var(--opacity-disabled, 40%)}:host([disabled]) ::slotted(*){pointer-events:none}";

const RuxAccordion = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.disabled = false;
    this.disallowMultiple = false;
  }
  updatedExpanded(event) {
    //if rux-accordion has the attribute to disallow-multiple then make sure only one rux-accordion-item is open at a time
    if (this.disallowMultiple === true) {
      event.preventDefault();
      const items = this.el.querySelectorAll('rux-accordion-item'); //get all rux-accordion-items
      const isExpanded = this.el.hasAttribute('expanded'); // state of the item when accessed
      items.forEach((item) => {
        item.removeAttribute('expanded');
      });
      //only add the expanded attribute if it was not there when clicked. Else, close the item.
      !isExpanded && this.el.setAttribute('expanded', '');
    }
  }
  render() {
    return (h(Host, { tabindex: this.disabled ? '-1' : null }, h("slot", null)));
  }
  get el() { return getElement(this); }
};
RuxAccordion.style = ruxAccordionCss;

export { RuxAccordion as rux_accordion };
