import { EventEmitter } from '../../stencil-public-runtime';
import { Status } from '../../components';
/**
 * @part icon - the toast's close icon
 * @part message - the toast's message
 * @part container - the toast's container element
 *
 * @slot (default) - the toast's message
 */
export declare class RuxToast {
  el: HTMLRuxToastElement;
  hasMessageSlot: boolean;
  /**
   *  Message for the toast.
   */
  message: string;
  /**
   *  If provided, the toast will automatically close after this amount of time. Accepts value either in milliseconds or seconds (which will be converted to milliseconds internally), between `2000` and `10000`, or `2` and `10`, respectively. Any number provided outside of the `2000`-`10000` range will be ignored in favor of the default 2000ms delay. <br>If `closeAfter` is not passed or if it is given an undefined or `null` value, the toast will stay open until the user closes it.
   */
  closeAfter?: number;
  /**
   * Prevents the user from dismissing the notification. Hides the close icon.
   */
  hideClose: boolean;
  /**
   * Allows for a status to be assigned to the toast.
   */
  status?: Status;
  /**
   * Fires when a toast is opened
   */
  ruxToastOpen: EventEmitter<boolean>;
  /**
   * Fires when a toast is closed
   */
  ruxToastClosed: EventEmitter<boolean>;
  private _timeoutRef;
  watchHandler(): void;
  connectedCallback(): void;
  componentDidLoad(): void;
  private _handleOpen;
  private _handleClose;
  private _updated;
  private _onClick;
  private _onKeyPress;
  get _closeAfter(): number | undefined;
  private _handleSlotChange;
  render(): any;
}
