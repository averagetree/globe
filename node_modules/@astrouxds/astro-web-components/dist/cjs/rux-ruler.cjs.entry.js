'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-a5939648.js');
const helpers = require('./helpers-2795465d.js');
require('./index-c37ac937.js');
require('./index-21b709f7.js');
require('./index-2ef8a026.js');

const ruxRulerCss = ":host{display:contents}.rux-track{display:contents}.ruler-time{display:flex;align-items:center;padding:12px 20px}.ruler-new-day-cell{background-color:var(--color-background-base-default, #101923);font-size:var(--font-size-sm, 0.875rem);display:block;text-align:center;padding:5px}.ruler-new-day-display{display:block;font-size:var(--font-size-sm, 0.875rem)}";

const RuxRuler = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.timePattern = /^00:.+$/;
    this.interval = '';
    this.start = '';
    this.end = '';
    this.timezone = 'UTC';
    this.showStartOfDay = false;
  }
  get dateRange() {
    return helpers.dateRange(new Date(this.start), new Date(this.end), this.interval, 1, this.timezone);
  }
  getColumn(index) {
    let unitOfTime = 60;
    if (this.interval === 'day') {
      unitOfTime = 24;
    }
    // same as for days
    if (this.interval === 'week') {
      unitOfTime = 24;
    }
    if (this.interval === 'month') {
      unitOfTime = 24;
    }
    const start = unitOfTime * index + 2;
    const end = start + unitOfTime;
    return `${unitOfTime * index + 2} / ${end}`;
  }
  shouldShowDate(time) {
    if (this.interval !== 'hour') {
      return false;
    }
    if (!this.showStartOfDay) {
      return false;
    }
    return this.timePattern.test(time);
  }
  render() {
    return (index.h(index.Host, null, index.h("div", { class: "rux-ruler rux-track" }, this.dateRange.map(([time, newDayDate], index$1) => {
      const newDay = this.timePattern.test(time)
        ? newDayDate
        : '';
      return (index.h("span", { key: index$1, class: {
          'ruler-time': true,
          'ruler-new-day-cell': this.shouldShowDate(time),
        }, style: {
          gridRow: '1',
          gridColumn: this.getColumn(index$1),
        } }, time, this.shouldShowDate(time) ? (index.h("span", { class: "ruler-new-day-display" }, newDay)) : ('')));
    }))));
  }
  get el() { return index.getElement(this); }
};
RuxRuler.style = ruxRulerCss;

exports.rux_ruler = RuxRuler;
