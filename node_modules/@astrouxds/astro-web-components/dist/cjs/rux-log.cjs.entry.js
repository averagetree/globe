'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-a5939648.js');

const ruxLogCss = ":host{display:block;overflow:hidden}:host([hidden]){display:none}.rux-log{border:1px solid var(--log-color-border, #000000)}.rux-log__header-event-cell{width:80%}.header-event-container{display:flex;align-items:center}.rux-log__filter{margin-left:auto;width:170px}rux-datetime{min-width:calc(var(--spacing-20, 5rem) - var(--spacing-050, 0.125rem));display:inline-block}rux-status{margin:var(--spacing-0, 0rem) var(--spacing-1, 0.25rem)}rux-table-header-cell{width:1%;border-width:1px;border-style:solid;border-color:var(--color-background-base-default, #101923);height:calc( var(--spacing-10, 2.5rem) + var(--spacing-1, 0.25rem) - 2px )}rux-table-cell{height:calc(var(--spacing-8, 2rem) - 1px)}.rux-log__notification{width:2000%;align-content:center;color:var(--color-text-inverse, #080c11);background-color:var(--color-background-interactive-default, #4dacff);padding:var(--spacing-2, 0.5rem)}";

const RuxLog = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.data = [];
    this.timezone = 'UTC';
    this.filter = undefined;
  }
  syncFilter() {
    if (this.inputEl.value !== this.filter) {
      this.inputEl.value = this.filter || '';
    }
  }
  _setFilter(e) {
    this.filter = e.target.value;
  }
  get filteredData() {
    if (this.filter) {
      const filter = this.filter;
      return this.data.filter((row) => row.message.toLowerCase().includes(filter.toLowerCase()));
    }
    else {
      return this.data;
    }
  }
  render() {
    return (index.h(index.Host, null, index.h("div", { class: "rux-log" }, index.h("slot", { name: "table" }, index.h("rux-table", null, index.h("slot", { name: "table-header" }, index.h("rux-table-header", { class: "relative" }, index.h("slot", { name: "table-header-row" }, index.h("rux-table-header-row", null, index.h("rux-table-header-cell", null, "Time"), index.h("rux-table-header-cell", null), index.h("rux-table-header-cell", { class: "rux-log__header-event-cell" }, index.h("div", { class: "header-event-container" }, "Event", index.h("rux-input", { size: "small", class: "rux-log__filter", type: "search", placeholder: "Search...", ref: (el) => (this.inputEl = el), onRuxinput: (event) => this._setFilter(event) }))))))), this.filter && (index.h("div", { class: "rux-log__notification", part: "log-notification" }, "A filter with ", index.h("b", null, this.filter), " is enabled.", ' ', this.data.length -
      this.filteredData.length, ' ', "of ", this.data.length, " records are currently hidden.")), index.h("slot", { name: "table-body" }, index.h("rux-table-body", null, this.filteredData.map((row) => (index.h("rux-table-row", null, index.h("rux-table-cell", null, index.h("rux-datetime", { hour: "2-digit", "time-zone": this.timezone, minute: "2-digit", second: "2-digit", date: row.timestamp })), index.h("rux-table-cell", null, index.h("rux-status", { status: row.status })), index.h("rux-table-cell", null, row.message)))))))))));
  }
  get el() { return index.getElement(this); }
  static get watchers() { return {
    "filter": ["syncFilter"]
  }; }
};
RuxLog.style = ruxLogCss;

exports.rux_log = RuxLog;
